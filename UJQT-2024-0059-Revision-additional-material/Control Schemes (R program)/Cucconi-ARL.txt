######################################################################################
# The R program below calculates the ARL  for the CPD scheme based on the Cucconi statistic when parameters shift.
# n0: Sample size for the warm-up data
# lambda: Smoothing parameter
# L: Control limits
# IC case: (loc, sca) = (0, 1) 
# OC case: (loc, sca) = (shift, a) ######################################################################################

ARL<-function(L,shift,a){
  n0<-20
  loop<-10000
  T<-5000

cl <- makeCluster(detectCores())
registerDoParallel(cl)

  rls <- foreach(i = 1:loop,.combine = 'c')%dopar%{
       x<-rnorm(n0, 0, 1)  
      for (n in (n0+1):T) {
      y<-rnorm(1, shift, a)
      x<-c(x,y)
      R<-rank(x)
      m<-NULL
      Z<-0
      lambda<-0.1
      for (r in n0:(n-1)) {
#########Cucconi statistic
      ET1 <- (n-r)*(n + 1)/2
      ES1 <- (n-r)*(n + 1)*(2*n+1)/6
      ES2<-ES1
      SDT1 <- r*(n-r)*(n + 1)/12
      SDS1 <-r*(n-r)*(n + 1)*(2*n+1)*(8*n+11)/180
      SDS2<-SDS1
      rho<-2*(n^2-4)/((2*n+1)*(8*n+11))-1
      T1<-sum(R[(r+1):n])         
      S1<-sum(R[(r+1):n]^2)
      S2<-(n-r)*(n+1)^2-2*(n+1)*T1+S1
      U<-(S1-ES1)/sqrt(SDS1)          
      V<-(S2-ES2)/sqrt(SDS2)
      C1<-(U^2+V^2-2*rho*U*V)/(2*(1-rho^2))
      Z<-lambda*C1+(1-lambda)*Z +rnorm(1,0,0.01)
      m<-c(m,Z)
      }
      K<-max(m)
      h<-L[n-n0]
      if(K>h|n==T){
        rl<- n-n0
        break
      }
    }
    
    rl
  }
  stopCluster(cl)

  arl<-mean(rls)
  sdrl<-sd(rls)
  quan<-quantile(rls,c(0.1,0.25,0.5,0.75,0.90))
  uqna<-as.numeric(quan)   
  output <- c(shift,arl,sdrl,quan,length(rls))
  return(output)
}

